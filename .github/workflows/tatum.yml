# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Tatum - generate CSharp.Core from OpenAPI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  PACKAGE_SOURCE: https://nuget.pkg.github.com/tatumio/index.json
  MAPPING_PATH: ./tatum/oneOfMapping.json
  CONFIG_PATH: ./tatum/config.yaml

jobs:
  Build_Version:
    name: Get Version
    uses: ./.github/workflows/calculateBuildVersion.yml

  Generate_Cores:
    strategy:
      max-parallel: 1
      matrix:
        arrays: [
          { package: "Ethereum", chains: "ETH" },
          { package: "Bitcoin", chains: "BTC" },
          { package: "Nft", chains: "ETH-BTC-MATIC-BSC-ONE" },
          { package: "FungibleTokens", chains: "ETH-BTC-MATIC-BSC-ONE" },
          { package: "Polygon", chains: "MATIC" },
          { package: "Bsc", chains: "BSC" },
          { package: "Harmony", chains: "ONE" }
        ]
    name: ${{ matrix.arrays.package }} - Generate Core
    runs-on: ubuntu-latest
    needs: Build_Version

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean package -f pom.xml -DskipTests
    - name: Prepare version control
      run: |
        git config --unset-all http.https://github.com/.extraheader
        git clone https://user:${{ secrets.DISPATCH_TOKEN }}@github.com/tatumio/tatum-csharp.git
        cd tatum-csharp
        git config user.name "generator-workflow"
        git config user.email "csharp-generator@tatum.io"
        git checkout develop
    - name: Generate Ethereum Core
      uses: actions/generateClient@develop
      with:
        package: Ethereum
        chains: ETH
    - name: Generate Bitcoin Core
      uses: actions/generateClient@develop
      with:
        package: Bitcoin
        chains: BTC
    - name: Generate Nft Core
      uses: actions/generateClient@develop
      with:
        package: Nft
        chains: ETH-BTC-MATIC-BSC-ONE
    - name: Generate FungibleTokens Core
      uses: actions/generateClient@develop
      with:
        package: FungibleTokens
        chains: ETH-BTC-MATIC-BSC-ONE
    - name: Generate Polygon Core
      uses: actions/generateClient@develop
      with:
        package: Polygon
        chains: MATIC
    - name: Generate Bsc Core
      uses: actions/generateClient@develop
      with:
        package: Bsc
        chains: BSC
    - name: Generate Harmony Core
      uses: actions/generateClient@develop
      with:
        package: Harmony
        chains: ONE
    - name: Generate Solana Core
      uses: actions/generateClient@develop
      with:
        package: Solana
        chains: SOL
    - name: Generate Clients
      run: java -jar ./modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -i ./tatum/Tatum.CSharp.${{ matrix.arrays.package }}_trim_trans.json -c ${{ env.CONFIG_PATH }} --additional-properties=oneOfMappingFilePath=${{ env.MAPPING_PATH }},chainsToInclude=${{ matrix.arrays.chains }},packageName=Tatum.CSharp.${{ matrix.arrays.package }}.Core
    - name: Push to SDK repo
      run: |
          git add .
          git status
          if [[ `git status --porcelain` ]]; then
            echo "Changes detected, committing"
            git commit -m 'New Core generated'
            git push
          fi
