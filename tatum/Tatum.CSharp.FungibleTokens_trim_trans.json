{
  "openapi": "3.0.0",
  "security": [
    {
      "X-API-Key": []
    }
  ],
  "info": {
    "title": "Tatum API Reference",
    "version": "3.17.2",
    "description": "# Welcome to the Tatum API Reference!\n\n## What is Tatum?\n\nTatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the\nTatum blockchain development framework, visit [our website](https://tatum.io/framework).\n\nThe Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all\nsupported blockchains using unified API calls.\n\n## Supported blockchains\n\nTatum supports multiple blockchains and various blockchain features.\n\nBecause not all blockchains function identically, Tatum supports a different set of features on each blockchain.\n\nTo see all the blockchains that Tatum supports, please refer to [this article](https://docs.tatum.io/introduction/supported-blockchains).\n\n## Need help?\n\nTo chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join \nour [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum,\nreview the [online documentation](https://docs.tatum.io/).\n\n# Authentication\n\nWhen using the Tatum API, you authenticate yourself with an **API key**.\n<SecurityDefinitions />\n",
    "x-logo": {
      "url": "https://tatum.io/images/Light.svg",
      "altText": "Tatum"
    }
  },
  "servers": [
    {
      "url": "https://api.tatum.io"
    }
  ],
  "tags": [
    {
      "description": "<p>Interact with the blockchain directly by connecting to the blockchain node and communicating with it through JSON-RPC.</p>\n<p>Each node-related API supports its own set of the blockchains. The list of the supported blockchains is provided in the API description further in this section.</p>\n",
      "name": "Node RPC"
    },
    {
      "description": "<p>A Tatum Account is the primary building block of Tatum-powered applications. It is an envelope that holds essential information about balances, the state of the account or customer, and to whom the account belongs.<br/><br/>\nAccounts in Tatum are stored within Tatum Private Ledger. Tatum Private Ledger contains information about accounts, the customers that own the accounts, transactions that affect the accounts or virtual currencies present in the ledger.<br/><br/>\nBy default, the private ledger is not connected to any blockchain. It is possible to create an application on it without any blockchain at all. Using Tatum Private Ledger and the building blocks included within it, it is possible to quickly swap the whole application from the ledger to any blockchain supported by Tatum. All of the API calls will remain the same, the only thing that changes is the blockchain the application lives on.<br/><br/>\nMost blockchains do not have any compliance layer at all. It is not possible to freeze funds at a blockchain address or deactivate an address. The Tatum Account has built-in compliance, and it is possible to block funds in the account, freeze outgoing transactions from the account or even completely deactivate the account.\n</p>\n",
      "name": "Account"
    },
    {
      "description": "<p>An endpoint used to create and list transactions within Tatum Private Ledger. A transaction is performed between 2 accounts with the same currency. To perform an exchange operation between accounts with different currencies, API calls from <a href=\"#tag/Order-BookLedger-Order-Book\">Order Book</a> sections are available. Transactions in the ledger are instant, with a settlement time of below 200ms.<br/>\nTatum Private Ledger supports microtransactions - a transaction of an amount as little as 1e-30 (30 decimal places). Transactions are atomic.<br/>\nWhen there is an insufficient balance in the sender account, or recipient account cannot receive funds, the transaction is not settled.</p>\n",
      "name": "Transaction"
    },
    {
      "description": "<p>An endpoint used to handle customer operations, like updating customer information, enabling/disabling etc.\nWithin Tatum API, a customer represents a client of the entity that communicates with Tatum.<br/>\nCustomers cannot be created via any other operation than Create Ledger Account.<br/>\nDue to compliance restrictions, it is recommended to enter the country of residence of the customer and the country of the provider. The Tatum compliance engine operates based on this information.\n</p>\n",
      "name": "Customer"
    },
    {
      "description": "<p>Register and use Tatum Private Ledger's virtual currencies. You can create your own virtual currency and distribute it amongst your customers.<br/>\nVirtual currencies are used to support FIAT currencies. When a virtual currency is created with basePair of the FIAT currency, it is possible to perform transactions in the private ledger in FIAT.\n</p>\n",
      "name": "Virtual Currency"
    },
    {
      "description": "<p>The gas pump is Tatum's feature that helps you manage gas fees in a custodial application. When you use the gas pump, gas fees for any transaction made by your customers (users of your custodial application) are automatically deducted from the master address instead of the customer's address. This eliminates the need to send crypto to each customer's address to pay for gas fees.</p>\n<p>For more information about the gas pump, see <a href=\"https://docs.tatum.io/gas-pump/pay-gas-fees-with-tatum-gas-pump\" target=\"_blank\">our user documentation</a>.</p>\n<p>Each API related to the gas pump supports its own set of the blockchains. The list of the supported blockchains is provided in the API description further in this section.</p>\n",
      "name": "Gas pump"
    },
    {
      "description": "<p>Endpoints to handle subscriptions to the Tatum Platform. Subscriptions allow users to enable some additional features or reports that are not enabled by default,\nlike outgoing off-chain transaction scanning, accounts with balances above the limit, etc.</p>\n",
      "name": "Notification subscriptions"
    },
    {
      "description": "<p>Endpoint to handle Order book operations like creating BID / ASK trades between Tatum Private Virtual accounts, obtaining trade histories, creating futures etc. It is possible to build an exchange based on the Ledger Accounts.</p>",
      "name": "Order Book"
    },
    {
      "description": "<p><a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Key Management System</a> (KMS) is a comprehensive solution for building custodial applications. KMS runs locally on your server and provides security for generating wallets, addresses, and private keys, and for signing transactions.</p>\n<p>KMS builds a list of pending transaction to sign and provides the options to complete a transaction after it has been signed and to obtain transaction details with the result of the blockchain operation via the transaction ID.</p>\n<p>In KMS, each managed wallet or private key is assigned a unique signature ID (<code>signatureId</code>) that represents that wallet or private key. This signature ID is then used in an API request to identify the wallet.</p>\n<p>Depending on the API, you can use the signature ID in an API call request in the following ways:</p>\n<ul>\n<li>\nTo represent the <b>mnemonic</b> type of the wallet; for example, in the <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/BtcTransfer\" target=\"_blank\">API for sending BTC from a virtual account to the blockchain</a> (see the <code>transferBtcKMS</code> request schema).</li>\n<li>To represent the <b>privateKey</b> type of the wallet; for example, in the <a href=\"https://apidoc.tatum.io/tag/Bitcoin#operation/BtcTransferBlockchain\" target=\"_blank\">API for sending BTC to a blockchain address</a> (see the <code>BtcTransactionFromUTXOKMS</code> request schema).</li>\n<li>To represent the <b>mnemonic</b> and <b>index</b> type of the wallet; for example, in the <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/EthTransfer\" target=\"_blank\">API for sending ETH from a virtual account to the blockchain</a> (see the <code>transferEthKMS</code> request schema).<br />In this case, the index of the specific private key generated from the mnemonic must be used in addition to the signature ID.</li>\n</ul>\n<p>You can run KMS on the following operating systems:</p>\n<ul>\n<li><b>macOS:</b> Natively or via <a href=\"https://hub.docker.com/repository/docker/tatumio/tatum-kms\" target=\"_blank\">Docker</a></li>\n<li><b>Unix:</b> Natively or via <a href=\"https://hub.docker.com/repository/docker/tatumio/tatum-kms\" target=\"_blank\">Docker</a></li>\n<li><b>MS Windows:</b> Only via <a href=\"https://hub.docker.com/repository/docker/tatumio/tatum-kms\" target=\"_blank\">Docker</a></li>\n</ul>\n<p>For more information about KMS, see the <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">KMS GitHub repository</a> and the <a href=\"https://docs.tatum.io/private-key-management/private-key-management\" target=\"_blank\">user documentation</a>.</p>\n</ul></p>\n",
      "name": "Key Management System"
    },
    {
      "description": "<p>An endpoint to check if the blockchain address is safe to work with or not.</p>\n",
      "name": "Malicious address"
    },
    {
      "description": "<p>Manage deposit addresses associated with your virtual account.</p>\n<p>Depending on how virtual accounts are connected to the blockchain, the virtual accounts can be:</p>\n<ul>\n<li><b>Virtual accounts with associated deposit addresses</b>\n<br/>Customers can send funds to and receive funds from other blockchain addresses.</li>\n<li><b>Virtual accounts with no deposit addresses</b>\n<br/>These accounts have a cryptocurrency assigned but do not have any associated deposit addresses. The customers can send funds to and receive funds from another virtual accounts and can send funds to blockchain addresses. However, the customers cannot receive funds from blockchain addresses.</li>\n</ul>\n",
      "name": "Blockchain addresses"
    },
    {
      "description": "<p>An endpoint to handle operations between Tatum Private Ledger and the blockchain, e.g. to create blockchain transactions from ledger accounts,\ncreate custom Ethereum ERC20 tokens, Stellar XLM, or Ripple XRP custom assets and register them as regular currency into the Tatum Private Ledger.</p>\n",
      "name": "Blockchain operations"
    },
    {
      "description": "<p>An endpoint used to create, cancel, or complete withdrawals by customers from Tatum to supported blockchains.\nWithdrawals are always multi-step operations that consist of the following steps:\n<ul>\n<li><b>create withdrawal</b></li>\n<li><b>perform blockchain transaction</b></li>\n<li><b>complete withdrawal</b></li>\n<li><b>cancel withdrawal</b>, when any of the previous operations fail</li>\n</ul>\n</p>\n",
      "name": "Withdrawals"
    },
    {
      "description": "<p>Bitcoin Blockchain enables access to the most commonly used Bitcoin methods. These methods bring a small level of abstraction\nand are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger\nto connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain</li>\n<li>Testnet3 - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a target=\"_blank\" href=\"https://testnet-faucet.mempool.co/\">https://testnet-faucet.mempool.co/</a></li></ul><br/>\n",
      "name": "Bitcoin"
    },
    {
      "description": "<p><a href=\"https://ethereum.org/\" target=\"_blank\">Ethereum</a> is a decentralized, open-source blockchain. With Tatum, you can access the most commonly used Ethereum methods. These methods bring a certain level of abstraction and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside virtual accounts to connect the blockchain and a virtual account, like generating a wallet or getting information about transactions.</p>\n<p>Tatum supports the following Ethereum networks:</p>\n<ul>\n<li><b>Mainnet</b>, the primary public production blockchain</li>\n<li><b>Sepolia</b>, a proof-of-work testnet and the default testnet for Ethereum. The testnet cryptocurrency has no value, and you can obtain it from a faucet (for example, <a target=\"_blank\" href=\"https://fauceth.komputing.org/\">FaucETH</a>).</li>\n</ul>\n",
      "name": "Ethereum"
    },
    {
      "description": "<p>IPFS is a distributed file storage. You can store data to IPFS and read from them.</p>\n",
      "name": "IPFS"
    },
    {
      "description": "<p>Bitcoin Cash Blockchain enables access to the most commonly used Bitcoin Cash methods. These methods bring a small level of abstraction\n and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger\n to connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>\nTatum supports 2 chains:\n  <ul><li>Mainnet - a regular live chain</li>\n  <li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a target=\"_blank\" href=\"https://faucet.fullstack.cash/\">https://faucet.fullstack.cash/</a></li></ul>\n  </ul>\nTatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. It is possible to generate this type of wallet with 1 simple API call.</p>\n",
      "name": "Bitcoin Cash"
    },
    {
      "description": "<p>Build a peer-to-peer NFT marketplace and allow your customers to sell and buy assets. When an asset is sold, the creator is automatically paid, the asset is instantly transferred to the buyer, and you as the owner of the marketplace automatically receive a percentage of the transaction.</p>\n<p>Each marketplace-related API supports its own set of the blockchains. The list of the supported blockchains is provided in the API description further in this section.</p>\n",
      "name": "Marketplace"
    },
    {
      "description": "<p>The utility APIs help you use some native blockchain features such as getting the address of a smart contract or estimating the block number.</p>\n<p>Each utility API supports its own set of the blockchains. The list of the supported blockchains is provided in the API description further in this section.</p>\n",
      "name": "Blockchain utils"
    },
    {
      "description": "<p>Litecoin Blockchain enables access to the most commonly used Litecoin methods. These methods bring a small level of abstraction and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger\n to connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>\nTatum supports 2 chains:\n  <ul><li>Mainnet - a regular live chain</li>\n  <li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a target=\"_blank\" href=\"http://testnet.litecointools.com/\">http://testnet.litecointools.com/</a></li></ul>\nTatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. It is possible to generate this type of wallet with 1 simple API call.</p>\n",
      "name": "Litecoin"
    },
    {
      "description": "<p>Dogecoin Blockchain enables access to the most commonly used Dogecoin methods. These methods bring a small level of abstraction\n and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger\n to connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>\nTatum supports 2 chains:\n  <ul><li>Mainnet - a regular live chain</li>\n  <li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a target=\"_blank\" href=\"https://testnet-faucet.com/doge-testnet/\">https://testnet-faucet.com/doge-testnet/</a></li></ul>\nTatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. It is possible to generate this type of wallet with 1 simple API call.</p>\n",
      "name": "Dogecoin"
    },
    {
      "description": "<p>Flow Blockchain enables access to the most commonly used Flow methods. These methods bring a small level of abstraction\n and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger\n to connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>\nTatum supports FLOW and FUSD stable coin.<br/>\nTatum supports 2 chains:\n  <ul><li>Mainnet - a regular live chain</li>\n  <li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a target=\"_blank\" href=\"https://testnet-faucet.onflow.org/\">https://testnet-faucet.onflow.org/</a>\n<br/>To obtain FUSD on testnet, you can swap them using <a target=\"_blank\" href=\"https://swap-testnet.blocto.app/#/swap\">https://swap-testnet.blocto.app/#/swap</a></li></ul>\nTo create accounts or mint NFTs on <b>mainnet</b>, you have to have paid API Key. Tatum covers the transaction fees on FLOW blockchain out of the box, so mainnet operations are available only on the paid API Key.<br/>\nTatum handles automatically proposal key management - we internally rotate the proposal keys for you, so you don't have to take care of that and can easily scale your transaction throughput.<br/>\nTatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. It is possible to generate this type of wallet with 1 simple API call.<br/>\nIt's not possible to pregenerate addresses on the Flow blockchain. You can generate only public keys, which are used to generate address using a create account transaction to the Flow blockchain.\nYou have to have existing account on the Flow to initialize new address creation. Transactions on the Flow blockchain are free.</p>\n",
      "name": "Flow"
    },
    {
      "description": "<p>XRP Blockchain enables access to the most commonly used XRP methods. These methods bring a small level of abstraction\n and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger\n to connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>\n Tatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain</li>\n<li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a href=\"https://developers.ripple.com/xrp-test-net-faucet.html\" target=\"_blank\">https://developers.ripple.com/xrp-test-net-faucet.html</a>.</li></ul></p>\n<p><br/>In order to start using the XRP blockchain, we first need to create an XRP account. In XRP, the same account is used for the Mainnet and the Test chain. In order to have the account activated, it must be credited with 20 XRP. Because of this requirement, it is common to use one account for all customers and differentiate them via Destination tags, i.e. a number included in every transaction as an account distinguisher.<br/>\nWhen an off-chain deposit address is created for the ledger account, a Destination tag is generated, e.g. 12345 for that account. When a transaction to the blockchain is performed, it should contain the address of the recipient and the Destination tag as an account distinguisher.</p>\n",
      "name": "XRP"
    },
    {
      "description": "<p>XLM Blockchain enables access to the most commonly used XLM methods. These methods bring a small level of abstraction\nand are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger\nto connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>\nTatum supports 2 chains:\n<ul><li> Mainnet - a regular live chain</li>\n<li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a href=\"https://friendbot.stellar.org/?addr=address\" target=\"_blank\">https://friendbot.stellar.org/?addr=address</a>.</li></ul>\n<br/>In order to start using the XLM blockchain, we first need to create an XLM account. In order to have the account activated, it must be credited with 0.5 XLM.  Because of this requirement, it is common to use one account for all customers and differentiate them using a memo - a short text/number included in every transaction as an account distinguisher.<br/>\nWhen an off-chain deposit address is created for the ledger account, a memo is generated, e.g. 12345 for that account. When a transaction to the blockchain is performed, it should contain the address of the recipient and the memo as an account distinguisher.</p>\n",
      "name": "Stellar"
    },
    {
      "description": "<p>You can store data records on the blockchain. A record is stored permanently: it cannot be changed,\ndeleted, or modified by anyone and will be stored on the blockchain forever.\n",
      "name": "Blockchain storage"
    },
    {
      "description": "<p><a href=\"https://docs.bnbchain.org/docs/learn/beaconIntro\" target=\"_blank\">BNB Beacon Chain</a> is a blockchain developed by <a href=\"https://www.bnbchain.org/\" target=\"_blank\">Binance</a>. With Tatum, you can access the most commonly used BNB Beacon Chain methods. These methods bring a certain level of abstraction and are used for applications that communicate with the blockchain directly.</p>\n<p>BNB Beacon Chain does not provide the smart contract functionality.</p>\n<p>Tatum supports the following BNB Beacon Chain networks:</p>\n<ul>\n<li><b>Mainnet</b>, the primary public production blockchain</li>\n<li><b>Testnet</b>, a chain used for testing purposes. The testnet cryptocurrency has no value, and you can obtain it from a faucet (for example, get it from the <a target=\"_blank\" href=\"https://testnet.bnbchain.org/faucet-smart\">BNB Smart Chain Faucet</a> and transfer it to your BNB Beacon Chain address using the <a target=\"_blank\" href=\"https://www.bnbchain.org/en/binance-wallet\">Binance Wallet</a>).</li>\n</ul>\n",
      "name": "BNB Beacon Chain"
    },
    {
      "description": "<p>VeChain Blockchain enables access to the most commonly used VeChain methods. Tatum does not support off-chain capabilities for the VET blockchain.\nTatum KMS is not supported for VET transactions. VET supports 2 native assets - VET and VTHO. VTHO is used for paying transaction fees.\n<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Testnet - a test chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://faucet.vecha.in/\">https://faucet.vecha.in/</a></li></ul>\nTatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. It is possible to generate this type of wallet with 1 simple API call.</p>\n",
      "name": "VeChain"
    },
    {
      "description": "<p><b>Support for Cardano is deprecated.</b></p>\n<s><p><b>Cardano is in maintenance mode.</b></p>\n<p><a href=\"https://cardano.org/\" target=\"_blank\">Cardano</a> is a decentralized, open-source blockchain. With Tatum, you can access the most commonly used Cardano methods. These methods bring a certain level of abstraction and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside virtual accounts to connect the blockchain and a virtual account, like generating a wallet or getting information about transactions.</p>\n<p>Tatum supports Cardano mainnet and <a href=\"https://docs.cardano.org/cardano-testnet/getting-started\" target=\"_blank\">Cardano preproduction testnet</a>.</p></s>\n",
      "name": "Cardano"
    },
    {
      "description": "<p>Custodial API is a set of operations, which allows you to work with managed blockchain addresses without having its private key.\nYou can easily create new managed address and export its details - with private key as well - once required.<br/>\nThis features are currently in <b>Alpha version</b>.</p>\n",
      "name": "Custodial managed wallets"
    },
    {
      "description": "<p>\"NFT\" stands for \"Non-Fungible Token\", which means that each token is unique and irreplaceable. NFTs are described by the ERC-721 standard on the Ethereum blockchain or by the equivalent standard on the other blockchains.</p>\n<p>NFTs can be used for nearly any digital asset or good to ensure authenticity and scarcity, for example:<p>\n<ul>\n<li><b>In-game assets:</b> NFTs can be used to create unique collectibles in the form of characters, weapons, skins, or other equipment. Players can resell or trade assets directly as they choose, and their authenticity is easily verifiable.</li>\n<li><b>Music and other digital media:</b> NFTs can be used to create rare and unique collectible digital releases. Similarly, NFTs can be used to sell videos, art, or any other type of digital media. Collectors can own digital originals of their favorite songs, movies, and so on.</li>\n<li><b>Digital sports merchandise:</b> Trading cards, memorabilia, classic moments in sports history, and one-of-a-kind experiences can be sold as NFTs.</li>\n</ul>\n<p>Each NFT-related API its own set of the blockchains. The list of the supported blockchains is provided in the API description further in this section.</p>\n",
      "name": "NFT (ERC-721 or compatible)"
    },
    {
      "description": "<p>Fungible tokens are interchangeable and are used as a blockchain representation of the currency. Fungible tokens are described by the ERC-20 standard on the Ethereum blockchain or by the equivalent standard on the other blockchains.</p>\n<p>Each API related to fungible tokens supports its own set of the blockchains. The list of the supported blockchains is provided in the operation description further in this section.</p>\n",
      "name": "Fungible Tokens (ERC-20 or compatible)"
    },
    {
      "description": "<p>A Multi Token combines characteristics of fungible and non-fungible tokens. A single Multi Token smart contract allows you to mint fungible, non-fungible, and semi-fungible tokens and process different types of the tokens in a single transaction. Multi Tokens are described by the ERC-1155 standard on the Ethereum blockchain or by the equivalent standard on the other blockchains.<p/>\n<p>Multi Tokens can be used for nearly any digital asset or good to ensure authenticity and scarcity, for example:<p>\n<ul>\n<li><b>In-game assets:</b> Multi Tokens can be used to create unique collectibles in the form of characters, weapons, skins, or other equipment. Players can resell or trade assets directly as they choose, and their authenticity is easily verifiable.</li>\n<li><b>Music and other digital media:</b> Multi Tokens can be used to create rare and unique collectible digital releases. Similarly, Multi Tokens can be used to sell videos, art, or any other type of digital media. Collectors can own digital originals of their favorite songs, movies, and so on.</li>\n<li><b>Digital sports merchandise:</b> Trading cards, memorabilia, classic moments in sports history, and one-of-a-kind experiences can be sold as Multi Tokens.</li>\n</ul>\n<p>Each Multi Token-related API supports its own set of the blockchains. The list of the supported blockchains is provided in the API description further in this section.</p>\n",
      "name": "Multi Tokens (ERC-1155 or compatible)"
    },
    {
      "description": "<p>Solana is a blockchain network focused on fast transactions and high throughput. It uses a unique method of ordering transactions to improve its speed. Users can pay their transaction fees and interact with smart contracts with SOL, the network's native cryptocurrency.<br/>\n<b>For now, Solana is in <b>BETA</b> and there is a rate limitation applied for all projects for Solana to 40 req/s on the platform.</b><br/>\nTatum supports 2 chains:\n<ul><li>Mainnet BETA - a regular live chain\n<li>Devnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://solfaucet.com/\">https://solfaucet.com/</a></li></ul></p>\n",
      "name": "Solana"
    },
    {
      "description": "<p>Binance Smart Chain is an Ethereum EVM 100% compatible blockchain, and is very good for decentralized application (Dapp) development within many possible verticals including DeFi, NFT, Gaming, and many others.<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://testnet.binance.org/faucet-smart\">https://testnet.binance.org/faucet-smart</a></li></ul></p>\n",
      "name": "BNB Smart Chain"
    },
    {
      "description": "<p>Polygon (Matic) is an Ethereum EVM 100% compatible blockchain, and is very good for decentralized application (Dapp) development within many possible verticals including DeFi, NFT, Gaming, and many others.<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Mumbai Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://faucet.matic.network/\">https://faucet.matic.network/</a></li></ul></p>\n",
      "name": "Polygon"
    },
    {
      "description": "<p>Celo is fork of Celo with more than 1000 tps and possibility to pay for\ntransactions in it's own stable coin, cUSD. Celo Blockchain enables access to most commonly used Celo methods.\nThese methods bring small level of abstraction,\n       and are used for the type of applications that want to communicate with blockchain directly. Some of the methods are used alongside Tatum Private Ledger\n       to connect blockchain and private ledger together, like wallet generation or getting information about transactions.<br/>\n      Tatum supports 2 chains:\n      <ul><li>Mainnet - regular live chain\n      <li>Alfajorec - test chain used for testing purposes. Coins on test chain have no value and can be obtained from\n      Faucet, e.g. <a target=\"_blank\" href=\"https://celo.org/developers/faucet\">https://celo.org/developers/faucet</a></li></ul><br/>\n      Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. It is possible to generate this type of wallet with 1 simple API call.</p>\n",
      "name": "Celo"
    },
    {
      "description": "<p>Elrond (EGLD) is a distributed transactional computation protocol which relies on a sharded state architecture and a secure Proof of Stake consensus mechanism.\n<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Devnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://r3d4.fr/elrond/devnet/index.php\">https://r3d4.fr/elrond/devnet/</a></li></ul></p>\n",
      "name": "Elrond"
    },
    {
      "description": "<p>Algorand is a decentralized blockchain technology network. Algorand is enabling the simple creation of next generation financial products, protocols and exchange of value across defi, financial institutions and governments.<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://bank.testnet.algorand.network/\">https://bank.testnet.algorand.network/</a></li></ul></p>\n",
      "name": "Algorand"
    },
    {
      "description": "<p>Tron Blockchain enables access to most commonly used Tron methods. It's possible to generate TRON account, send TRX, TRC10 and TRC20 assets. It's also possible to generate custom TRC10 or TRC20 tokens using API.<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - regular live chain\n<li>Shasta Testnet - test chain used for testing purposes. Coins on test chain have no value and can be obtained from\nFaucet, e.g. <a target=\"_blank\" href=\"https://www.trongrid.io/shasta/\">https://www.trongrid.io/shasta/</a></li></ul>\n",
      "name": "Tron"
    },
    {
      "description": "<p>Klaytn is an Ethereum EVM 100% compatible blockchain, and is very good for decentralized application (Dapp) development within many possible verticals including DeFi, NFT, Gaming, and many others.<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Baobab Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://baobab.wallet.klaytn.com/access?next=faucet\">https://baobab.wallet.klaytn.com/access?next=faucet</a></li></ul></p>\n",
      "name": "Klaytn"
    },
    {
      "description": "<p>Harmony.ONE is an Oneeum L2 scaling solution 100% EVM compatible, and is very good for decentralized application (Dapp) development within many possible verticals including DeFi, NFT, Gaming, and many others.<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://faucet.pops.one/\">https://faucet.pops.one/</a></li></ul></p>\n",
      "name": "Harmony"
    },
    {
      "description": "<p>XDC Network (XinFin) is enterprise ready hybrid blockchain for global trade and finance, combining the power of Public & Private blockchains with interoperable Smart Contracts.\n<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://apothem.network/#getTestXDC\">https://apothem.network/#getTestXDC</a></li></ul></p>\n",
      "name": "XinFin"
    },
    {
      "description": "<p>Kcs (KCS) is an Ethereum EVM 100% compatible blockchain, and is very good for decentralized application (Dapp) development within many possible verticals including DeFi, NFT, Gaming, and many others.<br/>\nTatum supports 2 chains:\n<ul><li>Mainnet - a regular live chain\n<li>Mumbai Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from\na faucet, e.g. <a target=\"_blank\" href=\"https://faucet-testnet.kcc.network/\">https://faucet-testnet.kcc.network/</a></li></ul></p>\n",
      "name": "KuCoin"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Blockchain",
      "tags": [
        "Node RPC",
        "Algorand",
        "Bitcoin",
        "Bitcoin Cash",
        "BNB Smart Chain",
        "BNB Beacon Chain",
        "Cardano",
        "Celo",
        "Dogecoin",
        "Elrond",
        "Ethereum",
        "Flow",
        "Harmony",
        "Klaytn",
        "KuCoin",
        "Litecoin",
        "Polygon",
        "Solana",
        "Stellar",
        "Tron",
        "VeChain",
        "XinFin",
        "XRP"
      ]
    },
    {
      "name": "Subscriptions",
      "tags": [
        "Notification subscriptions"
      ]
    },
    {
      "name": "Fee estimation",
      "tags": [
        "Blockchain fees",
        "Virtual account blockchain fees"
      ]
    },
    {
      "name": "Smart Contracts",
      "tags": [
        "NFT (ERC-721 or compatible)",
        "Fungible Tokens (ERC-20 or compatible)",
        "Multi Tokens (ERC-1155 or compatible)",
        "Gas pump",
        "Marketplace",
        "Auction"
      ]
    },
    {
      "name": "Security",
      "tags": [
        "Key Management System",
        "Malicious address",
        "Custodial managed wallets"
      ]
    },
    {
      "name": "Storage",
      "tags": [
        "IPFS",
        "Blockchain storage"
      ]
    },
    {
      "name": "Virtual Accounts",
      "tags": [
        "Account",
        "Transaction",
        "Customer",
        "Virtual Currency",
        "Order Book",
        "Withdrawal",
        "Blockchain addresses",
        "Blockchain operations",
        "Deposit"
      ]
    },
    {
      "name": "Utils",
      "tags": [
        "Blockchain utils",
        "Exchange rate",
        "Service utils"
      ]
    }
  ],
  "paths": {
    "/v3/blockchain/token/deploy": {
      "post": {
        "description": "<p><b>2 credits per API call</b></p>\n<p>Deploy a fungible token smart contract on the blockchain. In a deployed smart contract, you can mint and burn fungible tokens. The whole supply of fungible tokens (the <code>supply</code> parameter in the request body) will be transferred to the specified blockchain address (the <code>address</code> parameter in the request body).<br/>\nSmart contracts are standardized and audited.</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>Algorand</li>\n<li>BNB Smart Chain</li>\n<li>Celo</li>\n<li>Ethereum</li>\n<li>Harmony</li>\n<li>Klaytn</li>\n<li>KuCoin Community Chain</li>\n<li>Polygon</li>\n<li>Solana</li>\n<li>XinFin</li>\n</ul>\n<p>You can review the code of a deployed smart contract <a href=\"https://github.com/tatumio/tatum-middleware/blob/master/src/contracts/token.sol\" target=\"_blank\">here</a>.</p>\n<p><b>Signing a transaction</b><br/>\nWhen deploying a fungible token smart contract, you are charged a fee for the transaction, and you must sign the transaction with the private key of the blockchain address from which the fee will be deducted.</p>\n<p>Providing the private key in the API is not a secure way of signing transactions, because the private key can be stolen or exposed. Your private keys should never leave your security perimeter. You should use the private keys only for testing a solution you are building on the <b>testnet</b> of a blockchain.</p>\n<p>For signing transactions on the <b>mainnet</b>, we strongly recommend that you use the Tatum <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Key Management System (KMS)</a> and provide the signature ID instead of the private key in the API. Alternatively, you can use the <a href=\"https://github.com/tatumio/tatum-js\" target=\"_blank\">Tatum JavaScript client</a>.</p>\n",
        "operationId": "Erc20Deploy",
        "parameters": [
          {
            "description": "Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.",
            "in": "header",
            "name": "x-testnet-type",
            "required": false,
            "schema": {
              "default": "ethereum-sepolia",
              "type": "string",
              "enum": [
                "ethereum-sepolia"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ChainDeployErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeploySolanaSpl"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeployCeloErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeployKcsErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeployAlgoErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeployErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeploySolanaSplKMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeployCeloErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeployKcsErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainDeployAlgoErc20KMS"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransactionHash"
                    },
                    {
                      "$ref": "#/components/schemas/SignatureId"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Deploy a fungible token smart contract",
        "tags": [
          "Fungible Tokens (ERC-20 or compatible)"
        ]
      }
    },
    "/v3/blockchain/token/mint": {
      "post": {
        "description": "<p><b>2 credits per API call</b></p>\n<p>Create new fungible tokens in the smart contract (the <code>contractAddress</code> parameter in the request body) and transfer them to the specified blockchain address (the <code>to</code> parameter in the request body). You can mint new fungible tokens only if the current supply of tokens in the smart contract is lower than the total supply set for this contract.</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>BNB Smart Chain</li>\n<li>Celo</li>\n<li>Ethereum</li>\n<li>Harmony</li>\n<li>Klaytn</li>\n<li>KuCoin Community Chain</li>\n<li>Polygon</li>\n<li>XinFin</li>\n</ul>\n<p><b>Signing a transaction</b><br/>\nWhen minting fungible tokens, you are charged a fee for the transaction, and you must sign the transaction with the private key of the blockchain address from which the fee will be deducted.</p>\n<p>Providing the private key in the API is not a secure way of signing transactions, because the private key can be stolen or exposed. Your private keys should never leave your security perimeter. You should use the private keys only for testing a solution you are building on the <b>testnet</b> of a blockchain.</p>\n<p>For signing transactions on the <b>mainnet</b>, we strongly recommend that you use the Tatum <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Key Management System (KMS)</a> and provide the signature ID instead of the private key in the API. Alternatively, you can use the <a href=\"https://github.com/tatumio/tatum-js\" target=\"_blank\">Tatum JavaScript client</a>.</p>\n",
        "parameters": [
          {
            "description": "Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.",
            "in": "header",
            "name": "x-testnet-type",
            "required": false,
            "schema": {
              "default": "ethereum-sepolia",
              "type": "string",
              "enum": [
                "ethereum-sepolia"
              ]
            }
          }
        ],
        "operationId": "Erc20Mint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ChainMintErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainMintErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainMintKcsErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainMintKcsErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainMintCeloErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainMintCeloErc20KMS"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransactionHash"
                    },
                    {
                      "$ref": "#/components/schemas/SignatureId"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Mint fungible tokens",
        "tags": [
          "Fungible Tokens (ERC-20 or compatible)"
        ]
      }
    },
    "/v3/blockchain/token/burn": {
      "post": {
        "description": "<p><b>2 credits per API call</b></p>\n<p>Burn fungible tokens. Burning fungible tokens deletes the specified supply of the tokens (the <code>amount</code> parameter in the request body) from the smart contract (the <code>contractAddress</code> parameter in the request body).</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>Algorand</li>\n<li>BNB Smart Chain</li>\n<li>Celo</li>\n<li>Ethereum</li>\n<li>Harmony</li>\n<li>Klaytn</li>\n<li>KuCoin Community Chain</li>\n<li>Polygon</li>\n<li>XinFin</li>\n</ul>\n<p><b>Signing a transaction</b><br/>\nWhen burning fungible tokens, you are charged a fee for the transaction, and you must sign the transaction with the private key of the blockchain address from which the fee will be deducted.</p>\n<p>Providing the private key in the API is not a secure way of signing transactions, because the private key can be stolen or exposed. Your private keys should never leave your security perimeter. You should use the private keys only for testing a solution you are building on the <b>testnet</b> of a blockchain.</p>\n<p>For signing transactions on the <b>mainnet</b>, we strongly recommend that you use the Tatum <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Key Management System (KMS)</a> and provide the signature ID instead of the private key in the API. Alternatively, you can use the <a href=\"https://github.com/tatumio/tatum-js\" target=\"_blank\">Tatum JavaScript client</a>.</p>\n",
        "parameters": [
          {
            "description": "Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.",
            "in": "header",
            "name": "x-testnet-type",
            "required": false,
            "schema": {
              "default": "ethereum-sepolia",
              "type": "string",
              "enum": [
                "ethereum-sepolia"
              ]
            }
          }
        ],
        "operationId": "Erc20Burn",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ChainBurnErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainBurnErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainBurnKcsErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainBurnKcsErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainBurnCeloErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainBurnCeloErc20KMS"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransactionHash"
                    },
                    {
                      "$ref": "#/components/schemas/SignatureId"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Burn fungible tokens",
        "tags": [
          "Fungible Tokens (ERC-20 or compatible)"
        ]
      }
    },
    "/v3/blockchain/token/approve": {
      "post": {
        "description": "<p><b>2 credits per API call</b></p>\n<p>Allow a blockchain address (the <code>spender</code> parameter in the request body) to transfer and burn fungible tokens on behalf of the smart contract owner.</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>BNB Smart Chain</li>\n<li>Celo</li>\n<li>Ethereum</li>\n<li>Harmony</li>\n<li>Klaytn</li>\n<li>Polygon</li>\n</ul>\n<p><b>Signing a transaction</b><br/>\nWhen allowing a blockchain address to transfer and burn fungible tokens, you are charged a fee for the transaction, and you must sign the transaction with the private key of the blockchain address from which the fee will be deducted.</p>\n<p>Providing the private key in the API is not a secure way of signing transactions, because the private key can be stolen or exposed. Your private keys should never leave your security perimeter. You should use the private keys only for testing a solution you are building on the <b>testnet</b> of a blockchain.</p>\n<p>For signing transactions on the <b>mainnet</b>, we strongly recommend that you use the Tatum <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Key Management System (KMS)</a> and provide the signature ID instead of the private key in the API. Alternatively, you can use the <a href=\"https://github.com/tatumio/tatum-js\" target=\"_blank\">Tatum JavaScript client</a>.</p>\n",
        "parameters": [
          {
            "description": "Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.",
            "in": "header",
            "name": "x-testnet-type",
            "required": false,
            "schema": {
              "default": "ethereum-sepolia",
              "type": "string",
              "enum": [
                "ethereum-sepolia"
              ]
            }
          }
        ],
        "operationId": "Erc20Approve",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApproveErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ApproveErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ApproveCeloErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ApproveCeloErc20KMS"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransactionHash"
                    },
                    {
                      "$ref": "#/components/schemas/SignatureId"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Allow a blockchain address to transfer and burn fungible tokens",
        "tags": [
          "Fungible Tokens (ERC-20 or compatible)"
        ]
      }
    },
    "/v3/blockchain/token/transaction": {
      "post": {
        "description": "<p><b>2 credits per API call</b></p>\n<p>Transfer a supply of fungible tokens existing in the smart contract (the <code>contractAddress</code> parameter in the request body) to the specified blockchain address (the <code>to</code> parameter in the request body).<br/>\nTransferring fungible tokens invokes the <code>transfer()</code> method.</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>Algorand</li>\n<li>BNB Smart Chain</li>\n<li>Celo</li>\n<li>Ethereum</li>\n<li>Harmony</li>\n<li>Klaytn</li>\n<li>KuCoin Community Chain</li>\n<li>Polygon</li>\n<li>Solana</li>\n<li>XinFin</li>\n</ul>\n<p><b>Transferring fungible tokens on Algorand</b><br/>\nOn Algorand, the recipient has to agree in advance to receive your fungible tokens because Algorand charges users for storing the tokens on their addresses, and an Algorand blockchain address by default does not receive the tokens unless explicitly agreed. Before transferring the fungible tokens, make sure that the recipient <a href=\"https://apidoc.tatum.io/tag/Algorand#operation/AlgorandBlockchainReceiveAsset\" target=\"_blank\">has agreed to receive the NFT</a> to their address.</p>\n<p><b>Blockchain-specific APIs to transfer fungible tokens</b><br/>\nYou can also use blockchain-specific APIs for transferring fungible tokens on the following blockchains:\n<ul>\n<li><a href=\"https://apidoc.tatum.io/tag/BNB-Smart-Chain#operation/BscBlockchainTransfer\" target=\"_blank\">BNB Smart Chain</a></li>\n<li><a href=\"https://apidoc.tatum.io/tag/Celo#operation/CeloBlockchainTransfer\" target=\"_blank\">Celo</a></li>\n<li><a href=\"https://apidoc.tatum.io/tag/Ethereum#operation/EthBlockchainTransfer\" target=\"_blank\">Ethereum</a></li>\n<li><a href=\"https://apidoc.tatum.io/tag/Harmony#operation/OneBlockchainTransfer\" target=\"_blank\">Harmony</a></li>\n<li><a href=\"https://apidoc.tatum.io/tag/KuCoin#operation/KcsBlockchainTransfer\" target=\"_blank\">KuCoin Community Chain</a></li>\n<li><a href=\"https://apidoc.tatum.io/tag/Polygon#operation/PolygonBlockchainTransfer\" target=\"_blank\">Polygon</a></li>\n<li><a href=\"https://apidoc.tatum.io/tag/XinFin#operation/XdcBlockchainTransfer\" target=\"_blank\">XinFin</a></li>\n</ul>\n<p><b>Signing a transaction</b><br/>\nWhen transferring fungible tokens, you are charged a fee for the transaction, and you must sign the transaction with the private key of the blockchain address from which the fee will be deducted.</p>\n<p>Providing the private key in the API is not a secure way of signing transactions, because the private key can be stolen or exposed. Your private keys should never leave your security perimeter. You should use the private keys only for testing a solution you are building on the <b>testnet</b> of a blockchain.</p>\n<p>For signing transactions on the <b>mainnet</b>, we strongly recommend that you use the Tatum <a href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\">Key Management System (KMS)</a> and provide the signature ID instead of the private key in the API. Alternatively, you can use the <a href=\"https://github.com/tatumio/tatum-js\" target=\"_blank\">Tatum JavaScript client</a>.</p>\n",
        "parameters": [
          {
            "description": "Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.",
            "in": "header",
            "name": "x-testnet-type",
            "required": false,
            "schema": {
              "default": "ethereum-sepolia",
              "type": "string",
              "enum": [
                "ethereum-sepolia"
              ]
            }
          }
        ],
        "operationId": "Erc20Transfer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ChainTransferEthErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferSolanaSpl"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferBscBep20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferCeloErc20Token"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferAlgoErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferKcsEthErc20"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferEthErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferSolanaSplKMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferBscBep20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferCeloErc20TokenKMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferAlgoErc20KMS"
                  },
                  {
                    "$ref": "#/components/schemas/ChainTransferKcsEthErc20KMS"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransactionHash"
                    },
                    {
                      "$ref": "#/components/schemas/SignatureId"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Transfer fungible tokens",
        "tags": [
          "Fungible Tokens (ERC-20 or compatible)"
        ]
      }
    },
    "/v3/blockchain/token/transaction/{chain}/{address}/{tokenAddress}": {
      "get": {
        "description": "<p><b>1 credit per API call</b></p>\n<p>Get incoming and outgoing transactions related to fungible tokens on a blockchain address.</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>Algorand</li>\n<li>Celo</li>\n<li>Ethereum</li>\n<li>Polygon</li>\n</ul>\n",
        "operationId": "Erc20GetTransactionByAddress",
        "parameters": [
          {
            "description": "The blockchain to work with",
            "in": "path",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CELO",
                "ALGO",
                "MATIC",
                "ETH"
              ],
              "example": "CELO"
            }
          },
          {
            "description": "Account address you want to get balance of",
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x8ce4e40889a13971681391aad29e88efaf91f784"
            }
          },
          {
            "description": "Address of the token smart contract",
            "in": "path",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x1ce4e40889a13971681391aad29e88efaf91f784"
            }
          },
          {
            "description": "Max number of items per page is 50.",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "maximum": 50,
              "minimum": 1
            },
            "required": true
          },
          {
            "description": "Offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          },
          {
            "description": "Transactions from this block onwards will be included.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "number",
              "minimum": 0,
              "example": 1087623
            }
          },
          {
            "description": "Transactions up to this block will be included.",
            "in": "query",
            "name": "to",
            "schema": {
              "type": "number",
              "minimum": 0,
              "example": 1087823
            }
          },
          {
            "description": "Sorting of the data. ASC - oldest first, DESC - newest first.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "default": "DESC",
              "example": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FungibleTx"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get fungible token transactions on a blockchain address",
        "tags": [
          "Fungible Tokens (ERC-20 or compatible)"
        ]
      }
    },
    "/v3/blockchain/token/balance/{chain}/{contractAddress}/{address}": {
      "get": {
        "description": "<p><b>1 credit per API call</b></p>\n<p>Get the number of the fungible tokens minted on a specific smart contract (the <code>contractAddress</code> path parameter in the request endpoint URL) that a blockchain address holds.</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>Algorand</li>\n<li>BNB Smart Chain</li>\n<li>Celo</li>\n<li>Elrond</li>\n<li>Ethereum</li>\n<li>Harmony</li>\n<li>Klaytn</li>\n<li>KuCoin Community Chain</li>\n<li>Polygon</li>\n<li>Solana</li>\n<li>XinFin</li>\n</ul>\n",
        "operationId": "Erc20GetBalance",
        "parameters": [
          {
            "description": "Network name",
            "in": "path",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CELO",
                "ALGO",
                "MATIC",
                "ETH",
                "BSC",
                "XDC",
                "KLAY",
                "ONE",
                "EGLD",
                "KCS",
                "SOL"
              ],
              "example": "CELO"
            }
          },
          {
            "description": "The blockchain address that you want to get the token balance of",
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B"
            }
          },
          {
            "description": "The address of the fungible token smart contract",
            "in": "path",
            "name": "contractAddress",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326"
            }
          },
          {
            "description": "Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored.",
            "in": "header",
            "name": "x-testnet-type",
            "required": false,
            "schema": {
              "default": "ethereum-sepolia",
              "type": "string",
              "enum": [
                "ethereum-sepolia"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Erc20Balance"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get the number of fungible tokens that a blockchain address holds in a smart contract",
        "tags": [
          "Fungible Tokens (ERC-20 or compatible)"
        ]
      }
    },
    "/v3/blockchain/token/address/{chain}/{address}": {
      "get": {
        "description": "<p><b>1 credit per API call</b></p>\n<p>Get the number of all fungible tokens that a blockchain address holds across a blockchain. The tokens are returned grouped by the smart contracts they were minted on.</p>\n<p>This API is supported for the following blockchains:</p>\n<ul>\n<li>Algorand</li>\n<li>Celo</li>\n<li>Ethereum</li>\n<li>Polygon</li>\n<li>Solana</li>\n</ul>\n",
        "operationId": "Erc20GetBalanceAddress",
        "parameters": [
          {
            "description": "Network name",
            "in": "path",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "CELO",
              "enum": [
                "CELO",
                "ETH",
                "MATIC",
                "SOL",
                "ALGO"
              ]
            }
          },
          {
            "description": "The blockchain address that you want to get the token balance of",
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Erc20BalanceForAddress"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get the total number of fungible tokens that a blockchain address holds",
        "tags": [
          "Fungible Tokens (ERC-20 or compatible)"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CustomFee": {
        "description": "The custom defined fee; if not present, will be calculated automatically",
        "type": "object",
        "required": [
          "gasLimit",
          "gasPrice"
        ],
        "properties": {
          "gasLimit": {
            "type": "string",
            "description": "Gas limit for transaction in gas price.",
            "pattern": "^[+]?\\d+$",
            "example": "40000"
          },
          "gasPrice": {
            "type": "string",
            "description": "Gas price in Gwei.",
            "pattern": "^[+]?\\d+$",
            "example": "20"
          }
        }
      },
      "TransactionHash": {
        "type": "object",
        "properties": {
          "txId": {
            "description": "The hash (ID) of the transaction",
            "example": "c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9",
            "type": "string"
          }
        },
        "required": [
          "txId"
        ]
      },
      "SignatureId": {
        "type": "object",
        "properties": {
          "signatureId": {
            "format": "uuid",
            "description": "The internal Tatum ID of the prepared transaction for Key Management Sysytem (KMS) to sign<br/>This is different from the <code>signatureId</code> parameter that you provided in the request body. The <code>signatureId</code> parameter in the request body specifies the signature ID associated with the private key in KMS.",
            "example": "1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6",
            "type": "string"
          }
        },
        "required": [
          "signatureId"
        ]
      },
      "Erc20BalanceForAddress": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "description": "The address of the smart contract that the fungible tokens were minted on"
          },
          "amount": {
            "type": "string",
            "description": "The number of the fungible tokens",
            "example": "10"
          }
        }
      },
      "Erc20Balance": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "string",
            "description": "The number of fungible tokens in the smallest token unit (for example, if the token has 10 decimal places, the number is returned as 9*10^10)",
            "example": "10"
          }
        }
      },
      "ChainDeployErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "XDC",
              "ONE"
            ]
          },
          "symbol": {
            "description": "Symbol of the ERC20 token",
            "example": "ERC_SYMBOL",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "Name of the ERC20 token",
            "example": "MyERC20",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string"
          },
          "totalCap": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "supply": {
            "description": "Initial supply of ERC20 token. If totalCap is not defined, this will be the total cap.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "address": {
            "description": "Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.",
            "maxLength": 43,
            "minLength": 42,
            "example": "0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6",
            "type": "string"
          },
          "fromPrivateKey": {
            "description": "Private key of Ethereum account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.",
            "type": "string",
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "maxLength": 66,
            "minLength": 66
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "address",
          "supply",
          "fromPrivateKey",
          "digits"
        ]
      },
      "ChainDeploySolanaSpl": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "SOL",
            "description": "The blockchain to work with",
            "enum": [
              "SOL"
            ]
          },
          "supply": {
            "description": "Initial supply of SPL token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 30,
            "minimum": 0,
            "type": "number"
          },
          "address": {
            "description": "Address on Solana blockchain, where all created SPL tokens will be transferred.",
            "maxLength": 43,
            "minLength": 44,
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "type": "string"
          },
          "from": {
            "description": "Address on Solana blockchain, from which the fee for the deployment of SPL will be paid.",
            "maxLength": 43,
            "minLength": 44,
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "type": "string"
          },
          "fromPrivateKey": {
            "description": "Private key of Solana account address, from which the fee for the deployment of SPL will be paid. Private key, or signature Id must be present.",
            "type": "string",
            "example": "3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad",
            "maxLength": 103,
            "minLength": 128
          }
        },
        "required": [
          "chain",
          "from",
          "address",
          "supply",
          "fromPrivateKey",
          "digits"
        ]
      },
      "ChainDeploySolanaSplKMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "SOL",
            "description": "The blockchain to work with",
            "enum": [
              "SOL"
            ]
          },
          "supply": {
            "description": "Initial supply of SPL token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 30,
            "minimum": 0,
            "type": "number"
          },
          "address": {
            "description": "Address on Solana blockchain, where all created SPL tokens will be transferred.",
            "maxLength": 43,
            "minLength": 44,
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "type": "string"
          },
          "from": {
            "description": "Address on Solana blockchain, from which the fee for the deployment of SPL will be paid.",
            "maxLength": 43,
            "minLength": 44,
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          }
        },
        "required": [
          "chain",
          "from",
          "address",
          "supply",
          "signatureId",
          "digits"
        ]
      },
      "FungibleTx": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "number",
            "example": 6541235,
            "description": "Block number"
          },
          "txId": {
            "type": "string",
            "example": "0x955c1037608c7aecb6d1a3f150ce7d0a80536bcabb0deb69d62f55292cc4c372",
            "description": "Transaction ID"
          },
          "contractAddress": {
            "type": "string",
            "example": "0x4f54fAD27F7F46C102Cd49b8E75C5593397cd9c3",
            "description": "Contract address"
          },
          "amount": {
            "type": "string",
            "example": "1",
            "description": "Amount of tokens transferred, in smallest decimals"
          },
          "from": {
            "type": "string",
            "example": "0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d",
            "description": "Sender"
          },
          "to": {
            "type": "string",
            "example": "0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea",
            "description": "recipient"
          }
        },
        "required": [
          "txId",
          "blockNumber",
          "contractAddress",
          "amount",
          "from",
          "to"
        ]
      },
      "ChainDeployErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "XDC",
              "ONE"
            ]
          },
          "symbol": {
            "description": "Symbol of the ERC20 token",
            "example": "ERC_SYMBOL",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "Name of the ERC20 token",
            "example": "MyERC20",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string"
          },
          "totalCap": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "supply": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "address": {
            "description": "Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.",
            "maxLength": 43,
            "minLength": 42,
            "example": "0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "address",
          "supply",
          "signatureId",
          "digits"
        ]
      },
      "ChainDeployKcsErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "KCS",
            "description": "The blockchain to work with",
            "enum": [
              "KCS"
            ]
          },
          "symbol": {
            "description": "Symbol of the ERC20 token",
            "example": "ERC_SYMBOL",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "Name of the ERC20 token",
            "example": "MyERC20",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string"
          },
          "totalCap": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "supply": {
            "description": "Initial supply of ERC20 token. If totalCap is not defined, this will be the total cap.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "address": {
            "description": "Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.",
            "maxLength": 43,
            "minLength": 42,
            "example": "0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6",
            "type": "string"
          },
          "fromPrivateKey": {
            "description": "Private key of Ethereum account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.",
            "type": "string",
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "maxLength": 66,
            "minLength": 66
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "address",
          "supply",
          "fromPrivateKey",
          "digits"
        ]
      },
      "ChainDeployKcsErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "KCS",
            "description": "The blockchain to work with",
            "enum": [
              "KCS"
            ]
          },
          "symbol": {
            "description": "Symbol of the ERC20 token",
            "example": "ERC_SYMBOL",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "Name of the ERC20 token",
            "example": "MyERC20",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string"
          },
          "totalCap": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "supply": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "address": {
            "description": "Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.",
            "maxLength": 43,
            "minLength": 42,
            "example": "0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "address",
          "supply",
          "signatureId",
          "digits"
        ]
      },
      "ChainDeployAlgoErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ALGO",
            "description": "The blockchain to work with",
            "enum": [
              "ALGO"
            ]
          },
          "symbol": {
            "description": "Symbol of the ERC20 token",
            "example": "ERC_SYMBOL",
            "maxLength": 8,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "Name of the ERC20 token",
            "example": "MyERC20",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string"
          },
          "totalCap": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "supply": {
            "description": "Initial supply of ERC20 token. If totalCap is not defined, this will be the total cap.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 19,
            "minimum": 1,
            "type": "number"
          },
          "address": {
            "description": "Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.",
            "maxLength": 58,
            "minLength": 42,
            "example": "52NRXAHUDA5RKC7Q6YYJHBINGTJB7NXLUVY3CSKOBLLNLTKCN2NGPRGTN0",
            "type": "string"
          },
          "fromPrivateKey": {
            "description": "Private key of Ethereum account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.",
            "type": "string",
            "example": "GDNQECUM2JDPTA4KXNSXHQBAYL56FDZ73NXCQ2OLB32PN2G5BLNO5GY3QD2BQOYVBPYPMMETQUGTJUQ7W3V2K4NRJFHAVVWVZVBG5G2",
            "maxLength": 103,
            "minLength": 103
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "description": "The transaction fee in ALGO",
            "type": "string",
            "example": "0.001"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "address",
          "supply",
          "fromPrivateKey",
          "digits",
          "fee"
        ]
      },
      "ChainDeployAlgoErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ALGO",
            "description": "The blockchain to work with",
            "enum": [
              "ALGO"
            ]
          },
          "symbol": {
            "description": "Symbol of the ERC20 token",
            "example": "ERC_SYMBOL",
            "maxLength": 8,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "Name of the ERC20 token",
            "example": "MyERC20",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string"
          },
          "totalCap": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "supply": {
            "description": "Initial supply of ERC20 token. If totalCap is not defined, this will be the total cap.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 19,
            "minimum": 1,
            "type": "number"
          },
          "address": {
            "description": "Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.",
            "maxLength": 58,
            "minLength": 42,
            "example": "52NRXAHUDA5RKC7Q6YYJHBINGTJB7NXLUVY3CSKOBLLNLTKCN2NGPRGTN0",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "description": "The transaction fee in ALGO",
            "type": "string",
            "example": "0.001"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "address",
          "supply",
          "signatureId",
          "digits",
          "fee"
        ]
      },
      "ChainDeployCeloErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "symbol": {
            "description": "Symbol of the ERC20 token",
            "example": "ERC_SYMBOL",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "Name of the ERC20 token",
            "example": "MyERC20",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string"
          },
          "totalCap": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "supply": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "address": {
            "description": "Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.",
            "maxLength": 42,
            "minLength": 42,
            "example": "0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6",
            "type": "string"
          },
          "fromPrivateKey": {
            "description": "Private key of Ethereum account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.",
            "type": "string",
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "maxLength": 66,
            "minLength": 66
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "address",
          "supply",
          "fromPrivateKey",
          "digits",
          "feeCurrency"
        ]
      },
      "ChainDeployCeloErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "symbol": {
            "description": "Symbol of the ERC20 token",
            "example": "ERC_SYMBOL",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "Name of the ERC20 token",
            "example": "MyERC20",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string"
          },
          "totalCap": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "supply": {
            "description": "Max supply of ERC20 token.",
            "maxLength": 38,
            "example": "10000000",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
            "type": "string"
          },
          "digits": {
            "description": "Number of decimal points",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "address": {
            "description": "Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.",
            "maxLength": 42,
            "minLength": 42,
            "example": "0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "address",
          "supply",
          "signatureId",
          "digits",
          "feeCurrency"
        ]
      },
      "ChainMintErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "XDC",
              "ONE"
            ]
          },
          "amount": {
            "description": "Amount to be minted and transferred to the recipient.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "to": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Blockchain address to send ERC-20 tokens to.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Address of ERC-20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "Private key of sender address. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "to",
          "amount",
          "contractAddress",
          "fromPrivateKey"
        ]
      },
      "ChainMintKcsErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "KCS",
            "description": "The blockchain to work with",
            "enum": [
              "KCS"
            ]
          },
          "amount": {
            "description": "Amount to be minted and transferred to the recipient.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "to": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Blockchain address to send ERC-20 tokens to.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Address of ERC-20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "Private key of sender address. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "to",
          "amount",
          "contractAddress",
          "fromPrivateKey"
        ]
      },
      "ChainMintErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "XDC",
              "ONE"
            ]
          },
          "amount": {
            "description": "Amount to be minted and transferred to the recipient.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "to": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Blockchain address to send ERC-20 tokens to.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Address of ERC-20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "to",
          "amount",
          "contractAddress",
          "signatureId"
        ]
      },
      "ChainMintKcsErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "KCS",
            "description": "The blockchain to work with",
            "enum": [
              "KCS"
            ]
          },
          "amount": {
            "description": "Amount to be minted and transferred to the recipient.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "to": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Blockchain address to send ERC-20 tokens to.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Address of ERC-20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "to",
          "amount",
          "contractAddress",
          "signatureId"
        ]
      },
      "ChainMintCeloErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "amount": {
            "description": "Amount to be minted and transferred to the recipient.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "to": {
            "maxLength": 42,
            "minLength": 42,
            "description": "Blockchain address to send ERC-20 tokens to.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "Address of ERC-20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "Private key of sender address. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          }
        },
        "required": [
          "chain",
          "to",
          "amount",
          "feeCurrency",
          "contractAddress",
          "fromPrivateKey"
        ]
      },
      "ChainMintCeloErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "amount": {
            "description": "Amount to be minted and transferred to the recipient.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "to": {
            "maxLength": 42,
            "minLength": 42,
            "description": "Blockchain address to send ERC-20 tokens to.",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "Address of ERC-20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          }
        },
        "required": [
          "chain",
          "to",
          "amount",
          "feeCurrency",
          "contractAddress",
          "signatureId"
        ]
      },
      "ApproveErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "ONE"
            ]
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "The address of the smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "spender": {
            "maxLength": 43,
            "minLength": 42,
            "description": "The blockchain address to be allowed to transfer or burn the fungible tokens",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the tokens allowed to be transferred or burnt",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "The private key of the smart contract's owner; the fee will be deducted from the owner's address"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "spender",
          "amount",
          "contractAddress",
          "fromPrivateKey"
        ]
      },
      "ApproveErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "ONE"
            ]
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "The address of the smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "spender": {
            "maxLength": 43,
            "minLength": 42,
            "description": "The blockchain address to be allowed to transfer or burn the fungible tokens",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the tokens allowed to be transferred or burnt",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the smart contract's owner; the fee will be deducted from the owner's address"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "spender",
          "amount",
          "contractAddress",
          "signatureId"
        ]
      },
      "ApproveCeloErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "The address of the smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "spender": {
            "maxLength": 42,
            "minLength": 42,
            "description": "The blockchain address to be allowed to transfer or burn the fungible tokens",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the tokens allowed to be transferred or burnt",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "The private key of the smart contract's owner; the fee will be deducted from the owner's address"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "spender",
          "amount",
          "feeCurrency",
          "contractAddress",
          "fromPrivateKey"
        ]
      },
      "ApproveCeloErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "The address of the smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "spender": {
            "maxLength": 42,
            "minLength": 42,
            "description": "The blockchain address to be allowed to transfer or burn the fungible tokens",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the tokens allowed to be transferred or burnt",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the smart contract's owner; the fee will be deducted from the owner's address"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "spender",
          "amount",
          "feeCurrency",
          "contractAddress",
          "signatureId"
        ]
      },
      "ChainBurnErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "XDC",
              "ONE",
              "ALGO"
            ]
          },
          "amount": {
            "description": "Amount of tokens to be destroyed.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Address of ERC20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "Private key of sender address. Private key, or signature Id must be present."
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "contractAddress",
          "fromPrivateKey",
          "amount"
        ]
      },
      "ChainBurnErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "XDC",
              "ONE",
              "ALGO"
            ]
          },
          "amount": {
            "description": "Amount of tokens to be destroyed.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Address of ERC20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "contractAddress",
          "signatureId",
          "amount"
        ]
      },
      "ChainBurnKcsErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "KCS",
            "description": "The blockchain to work with",
            "enum": [
              "KCS"
            ]
          },
          "amount": {
            "description": "Amount of tokens to be destroyed.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Address of ERC20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "Private key of sender address. Private key, or signature Id must be present."
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "contractAddress",
          "fromPrivateKey",
          "amount"
        ]
      },
      "ChainBurnKcsErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "KCS",
            "description": "The blockchain to work with",
            "enum": [
              "KCS"
            ]
          },
          "amount": {
            "description": "Amount of tokens to be destroyed.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "Address of ERC20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          }
        },
        "required": [
          "chain",
          "contractAddress",
          "signatureId",
          "amount"
        ]
      },
      "ChainBurnCeloErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "amount": {
            "description": "Amount of tokens to be destroyed.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "Address of ERC20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "Private key of sender address. Private key, or signature Id must be present."
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          }
        },
        "required": [
          "chain",
          "contractAddress",
          "feeCurrency",
          "fromPrivateKey",
          "amount"
        ]
      },
      "ChainBurnCeloErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "amount": {
            "description": "Amount of tokens to be destroyed.",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "Address of ERC20 token",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "Identifier of the private key associated in signing application. Private key, or signature Id must be present."
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          }
        },
        "required": [
          "chain",
          "contractAddress",
          "feeCurrency",
          "signatureId",
          "amount"
        ]
      },
      "ChainTransferAlgoErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ALGO",
            "description": "The blockchain to work with",
            "enum": [
              "ALGO"
            ]
          },
          "to": {
            "maxLength": 58,
            "minLength": 42,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 1,
            "description": "The asset ID (the ID of the fungible tokens)",
            "example": "1",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 103,
            "example": "72TCV5BRQPBMSAFPYO3CPWVDBYWNGAYNMTW5QHENOMQF7I6QLNMJWCJZ7A3V5YKD7QD6ZZPEHG2PV2ZVVEDDO6BCRGXWIL3DIUMSUCI",
            "minLength": 103,
            "description": "The private key of the blockchain address from which the fee will be deducted"
          }
        },
        "required": [
          "chain",
          "to",
          "contractAddress",
          "amount",
          "digits",
          "fromPrivateKey"
        ]
      },
      "ChainTransferAlgoErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ALGO",
            "description": "The blockchain to work with",
            "enum": [
              "ALGO"
            ]
          },
          "from": {
            "maxLength": 58,
            "minLength": 42,
            "description": "The blockchain address to send the fungible tokens from",
            "example": "NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y",
            "type": "string"
          },
          "to": {
            "maxLength": 58,
            "minLength": 42,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 1,
            "description": "The asset ID (the ID of the fungible tokens)",
            "example": "1",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the blockchain address that you are sending the fungible tokens from (the address that you specified in the <code>from</code> parameter); the transaction fee will be deducted from this address"
          }
        },
        "required": [
          "chain",
          "from",
          "to",
          "contractAddress",
          "amount",
          "digits",
          "signatureId"
        ]
      },
      "ChainTransferEthErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "XDC",
              "ONE"
            ]
          },
          "to": {
            "maxLength": 50,
            "minLength": 1,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "The blockchain address of the fungible token smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have; to find out how many decimal places are used in the fungible tokens, check out the <a href=\"https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress\" target=\"_blank\">smart contract</a>",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "The private key of the blockchain address from which the fee will be deducted"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "currency",
          "to",
          "contractAddress",
          "digits",
          "fromPrivateKey",
          "amount"
        ]
      },
      "ChainTransferSolanaSpl": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "SOL",
            "description": "The blockchain to work with",
            "enum": [
              "SOL"
            ]
          },
          "from": {
            "description": "The blockchain address to send the fungible tokens from",
            "maxLength": 44,
            "minLength": 43,
            "example": "BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs",
            "type": "string"
          },
          "to": {
            "description": "The blockchain address to send the fungible tokens to",
            "maxLength": 43,
            "minLength": 44,
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 44,
            "description": "The blockchain address of the fungible tokens",
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have",
            "example": 18,
            "maximum": 30,
            "minimum": 0,
            "type": "number"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 87,
            "example": "YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf",
            "minLength": 128,
            "description": "The private key of the blockchain address that you are sending the fungible tokens from (the address that you specified in the <code>from</code> parameter); the transaction fee will be deducted from this address"
          },
          "feePayer": {
            "description": "The blockchain address from which the fee will be deducted; if not set, defaults to the address that you specified in the <code>from</code> parameter",
            "maxLength": 44,
            "minLength": 43,
            "example": "BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs",
            "type": "string"
          },
          "feePayerPrivateKey": {
            "type": "string",
            "maxLength": 87,
            "example": "YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf",
            "minLength": 128,
            "description": "The private key of the blockchain address that you specified in the <code>feePayer</code> parameter; if not set, defaults to the private key that you specified in the <code>fromPrivateKey</code> parameter"
          }
        },
        "required": [
          "chain",
          "currency",
          "to",
          "contractAddress",
          "digits",
          "fromPrivateKey",
          "from",
          "amount"
        ]
      },
      "ChainTransferSolanaSplKMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "SOL",
            "description": "The blockchain to work with",
            "enum": [
              "SOL"
            ]
          },
          "from": {
            "description": "The blockchain address to send the fungible tokens from",
            "maxLength": 44,
            "minLength": 43,
            "example": "BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs",
            "type": "string"
          },
          "to": {
            "description": "The blockchain address to send the fungible tokens to",
            "maxLength": 43,
            "minLength": 44,
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 44,
            "description": "The blockchain address of the fungible tokens",
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have",
            "example": 18,
            "maximum": 30,
            "minimum": 0,
            "type": "number"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the blockchain address that you are sending the fungible tokens from (the address that you specified in the <code>from</code> parameter); the transaction fee will be deducted from this address"
          },
          "feePayer": {
            "description": "The blockchain address from which the fee will be deducted; if not set, defaults to the address that you specified in the <code>from</code> parameter",
            "example": "FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ",
            "maxLength": 44,
            "minLength": 43,
            "type": "string"
          },
          "feePayerSignatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the blockchain address that you specified in the <code>feePayer</code> parameter; if not set, defaults to the signature ID that you specified in the <code>signatureId</code> parameter"
          }
        },
        "required": [
          "chain",
          "currency",
          "to",
          "contractAddress",
          "digits",
          "signatureId",
          "from",
          "amount"
        ]
      },
      "ChainTransferEthErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ETH",
            "description": "The blockchain to work with",
            "enum": [
              "ETH",
              "BSC",
              "MATIC",
              "KLAY",
              "XDC",
              "ONE"
            ]
          },
          "to": {
            "maxLength": 50,
            "minLength": 1,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "The blockchain address of the fungible token smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have; to find out how many decimal places are used in the fungible tokens, check out the <a href=\"https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress\" target=\"_blank\">smart contract</a>",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the blockchain address from which the fee will be deducted"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "currency",
          "to",
          "contractAddress",
          "digits",
          "signatureId",
          "amount"
        ]
      },
      "ChainTransferKcsEthErc20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "KCS",
            "description": "The blockchain to work with",
            "enum": [
              "KCS"
            ]
          },
          "to": {
            "maxLength": 50,
            "minLength": 1,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "The blockchain address of the fungible token smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "The private key of the blockchain address from which the fee will be deducted"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "currency",
          "to",
          "contractAddress",
          "digits",
          "fromPrivateKey",
          "amount"
        ]
      },
      "ChainTransferKcsEthErc20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "KCS",
            "description": "The blockchain to work with",
            "enum": [
              "KCS"
            ]
          },
          "to": {
            "maxLength": 50,
            "minLength": 1,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 43,
            "minLength": 42,
            "description": "The blockchain address of the fungible token smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the blockchain address from which the fee will be deducted"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "currency",
          "to",
          "contractAddress",
          "digits",
          "signatureId",
          "amount"
        ]
      },
      "ChainTransferBscBep20": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "BSC",
            "description": "The blockchain to work with",
            "enum": [
              "BSC"
            ]
          },
          "to": {
            "maxLength": 50,
            "minLength": 1,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "The blockchain address of the fungible tokens",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have; to find out how many decimal places are used in the fungible tokens, check out the <a href=\"https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress\" target=\"_blank\">smart contract</a>",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "The private key of the blockchain address from which the fee will be deducted"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "to",
          "contractAddress",
          "digits",
          "fromPrivateKey",
          "amount"
        ]
      },
      "ChainTransferBscBep20KMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "BSC",
            "description": "The blockchain to work with",
            "enum": [
              "BSC"
            ]
          },
          "to": {
            "maxLength": 50,
            "minLength": 1,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "The blockchain address of the fungible tokens",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have; to find out how many decimal places are used in the fungible tokens, check out the <a href=\"https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress\" target=\"_blank\">smart contract</a>",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the blockchain address from which the fee will be deducted"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "fee": {
            "$ref": "#/components/schemas/CustomFee"
          }
        },
        "required": [
          "chain",
          "to",
          "contractAddress",
          "digits",
          "signatureId",
          "amount"
        ]
      },
      "ChainTransferCeloErc20Token": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "to": {
            "maxLength": 50,
            "minLength": 1,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "The blockchain address of the fungible token smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have; to find out how many decimal places are used in the fungible tokens, check out the <a href=\"https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress\" target=\"_blank\">smart contract</a>",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "fromPrivateKey": {
            "type": "string",
            "maxLength": 66,
            "example": "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2",
            "minLength": 66,
            "description": "The private key of the blockchain address from which the fee will be deducted"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          }
        },
        "required": [
          "chain",
          "to",
          "contractAddress",
          "digits",
          "feeCurrency",
          "fromPrivateKey",
          "amount"
        ]
      },
      "ChainTransferCeloErc20TokenKMS": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "CELO",
            "description": "The blockchain to work with",
            "enum": [
              "CELO"
            ]
          },
          "to": {
            "maxLength": 50,
            "minLength": 1,
            "description": "The blockchain address to send the fungible tokens to",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "contractAddress": {
            "maxLength": 42,
            "minLength": 42,
            "description": "The blockchain address of the fungible token smart contract",
            "example": "0x687422eEA2cB73B5d3e242bA5456b782919AFc85",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fungible tokens to be sent",
            "example": "100000",
            "type": "string",
            "pattern": "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$"
          },
          "digits": {
            "description": "The number of decimal places that the fungible tokens have; to find out how many decimal places are used in the fungible tokens, check out the <a href=\"https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress\" target=\"_blank\">smart contract</a>",
            "example": 18,
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          "signatureId": {
            "type": "string",
            "format": "uuid",
            "example": "26d3883e-4e17-48b3-a0ee-09a3e484ac83",
            "description": "The KMS identifier of the private key of the blockchain address from which the fee will be deducted"
          },
          "nonce": {
            "type": "number",
            "minimum": 0,
            "description": "The nonce to be set to the transaction; if not present, the last known nonce will be used"
          },
          "feeCurrency": {
            "type": "string",
            "description": "The currency in which the transaction fee will be paid",
            "enum": [
              "CELO",
              "CUSD",
              "CEUR"
            ]
          }
        },
        "required": [
          "chain",
          "to",
          "contractAddress",
          "digits",
          "feeCurrency",
          "signatureId",
          "amount"
        ]
      }
    },
    "securitySchemes": {
      "X-API-Key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header",
        "description": "The **API key** represents your [pricing plan](https://tatum.io/pricing) and defines how many API calls \nyou can make per second and what the total number of API calls per month is available for you.\n\nOne API key must be used by only one person.\n\nChoose one of the following authentication methods:\n\n* **Provide the API key in each API call.**\n\n  To obtain the API key, [create a Tatum account](https://dashboard.tatum.io/sign-up). Once you are logged in,\n  you are automatically assigned the Free plan.\n\n  With the Free plan:\n  * You get two API keys, one tied to the testnet of a blockchain and the other to the mainnet.\n  * You can make up to five API calls per second.\n  * The number of API calls per month is not limited.\n\n  When making an API call, provide the appropriate API key (testnet or mainnet) as either an HTTP header\n  or a path parameter of the API call.\n\n  If you ever need your API keys, you can find them in [your Tatum account](https://dashboard.tatum.io/).\n\n  For more information about the Free plan and paid plans, refer to [this article](https://docs.tatum.io/payments/plans-and-pricing).\n\n* **Get an auto-generated API key attached to API calls.**\n\n  Make an API call without any API key provided. The API key will be generated and tied to your IP address.\n  This API key is stored within the Tatum platform and is automatically attached to all your API calls.\n\n  With the auto-generated API key:\n  * You can make up to five API calls per second.\n  * You get 10,000,000 credits to spend on API calls within a month.\n\n    The number of credits is reset on the first day of a month. The unused credits from the current month are not\n    rolled over to the next month.\n\n  These limits are applied to both the testnet and mainnet.\n\n  By default, API calls with the auto-generated API key are executed against the mainnet.\n  To make an API call to the testnet, add the `type` query parameter set to `testnet` to the endpoint URL,\n  for example:\n\n  `https://api.tatum.io/v3/ledger/account?type=testnet`\n"
      }
    }
  }
}